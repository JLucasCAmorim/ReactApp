__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/lucas/React/MyProject/node_modules/@expo/ex-navigation/src/tab/ExNavigationTabBar.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _ExUnsupportedNativeView = require(_dependencyMap[3], "../ExUnsupportedNativeView");

  var _ExNavigationBadge = require(_dependencyMap[4], "../ExNavigationBadge");

  var _ExNavigationBadge2 = _interopRequireDefault(_ExNavigationBadge);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ExNavigationTabBar: {
      displayName: "ExNavigationTabBar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/lucas/React/MyProject/node_modules/@expo/ex-navigation/src/tab/ExNavigationTabBar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var BlurView = void 0;
  var expoModule = global.__exponent || global.__expo;

  if (expoModule) {
    BlurView = expoModule.BlurView ? expoModule.BlurView : expoModule.Components.BlurView;
  } else {
    BlurView = (0, _ExUnsupportedNativeView.unsupportedNativeView)('BlurView');
  }

  var DEFAULT_TAB_BAR_HEIGHT = 56;

  var ExNavigationTabBar = _wrapComponent("ExNavigationTabBar")((_temp = _class = function (_React$Component) {
    _inherits(ExNavigationTabBar, _React$Component);

    function ExNavigationTabBar() {
      _classCallCheck(this, ExNavigationTabBar);

      return _possibleConstructorReturn(this, (ExNavigationTabBar.__proto__ || Object.getPrototypeOf(ExNavigationTabBar)).apply(this, arguments));
    }

    _createClass(ExNavigationTabBar, [{
      key: "render",
      value: function render() {
        var height = (this.props.height || DEFAULT_TAB_BAR_HEIGHT) + (this.props.extraHeight || 0);
        var isTranslucent = this.props.translucent;
        var backgroundColor = isTranslucent ? 'rgba(255,255,255,0.5)' : '#fefefe';
        var paddingBottom = this.props.bottomOffset || 0;
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, {
              height: height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          },
          isTranslucent && _react3.default.createElement(BlurView, {
            style: [styles.translucentUnderlay, {
              height: height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          }),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.innerContainer, {
                backgroundColor: backgroundColor,
                paddingBottom: paddingBottom
              }, this.props.style],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 43
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.itemContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              this.renderTabItems()
            )
          )
        );
      }
    }, {
      key: "renderTabItems",
      value: function renderTabItems() {
        var _this2 = this;

        if (!this.props.items) {
          return null;
        }

        return this.props.items.map(function (item, index) {
          var renderIcon = item.renderIcon,
              renderTitle = item.renderTitle;
          var isSelected = _this2.props.selectedTab === item.id;
          var title = null;

          if (item.title) {
            if (renderTitle) {
              title = renderTitle(isSelected, item.title, index);
            } else {
              title = _react3.default.createElement(
                _reactNative.Text,
                {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                  }
                },
                item.title
              );
            }
          }

          var icon = renderIcon && renderIcon(isSelected, item.title, index);
          var badge = null;
          var renderBadge = item.renderBadge,
              badgeText = item.badgeText;

          if (renderBadge) {
            badge = renderBadge(isSelected, item.title, index);
          } else if (badgeText) {
            badge = _react3.default.createElement(
              _ExNavigationBadge2.default,
              {
                style: styles.badge,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 89
                }
              },
              badgeText
            );
          }

          if (item.showsTouches) {
            return _react3.default.createElement(
              _reactNative.TouchableNativeFeedback,
              {
                key: index,
                onPress: item.onPress,
                onLongPress: item.onLongPress,
                delayPressIn: 0,
                style: [styles.tabItem, isSelected ? item.selectedStyle : item.style],
                background: item.nativeFeedbackBackground,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 97
                }
              },
              title,
              icon,
              badge
            );
          } else {
            return _react3.default.createElement(
              _reactNative.TouchableWithoutFeedback,
              {
                key: index,
                onPress: item.onPress,
                delayPressIn: 0,
                onLongPress: item.onLongPress,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 114
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: [styles.tabItem, isSelected ? item.selectedStyle : item.style],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 119
                  }
                },
                icon,
                badge,
                title
              )
            );
          }
        });
      }
    }]);

    return ExNavigationTabBar;
  }(_react3.default.Component), _class.defaultHeight = DEFAULT_TAB_BAR_HEIGHT, _temp));

  exports.default = ExNavigationTabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      backgroundColor: 'transparent'
    },
    translucentUnderlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    innerContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      borderTopColor: '#b2b2b2',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth
    },
    badge: {
      position: 'absolute',
      top: 3,
      right: 18,
      backgroundColor: 'black'
    },
    itemContainer: {
      flex: 1,
      flexDirection: 'row'
    },
    tabItem: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
});