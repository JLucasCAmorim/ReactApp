__d(function (global, require, module, exports, _dependencyMap) {
  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/lucas/React/MyProject/node_modules/react-native-select-list/src/list.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    List: {
      displayName: "List"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/lucas/React/MyProject/node_modules/react-native-select-list/src/list.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var window = _reactNative.Dimensions.get('window');

  var AnimatedScrollView = _reactNative.Animated.createAnimatedComponent(_reactNative.ScrollView);

  var List = _wrapComponent("List")(function (_Component) {
    _inherits(List, _Component);

    function List() {
      _classCallCheck(this, List);

      var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this));

      _this.state = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        list: 0
      };
      return _this;
    }

    _createClass(List, [{
      key: "measureProps",
      value: function measureProps() {
        var _this2 = this;

        this.refs.list.measure(function (x, y, width, height) {
          _this2.setState({
            list: height
          });
        });
        this.props.select.measureInWindow(function (x, y, width, height) {
          _this2.setState({
            x: x,
            y: y,
            width: width,
            height: height
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            children = _props.children,
            position = _props.position;
        return _react3.default.createElement(
          _reactNative.Modal,
          {
            transparent: true,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          },
          _react3.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            {
              onPress: this.props.onOverlayPress,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            },
            _react3.default.createElement(_reactNative.View, {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 43
              }
            })
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              onLayout: this.measureProps.bind(this),
              ref: "list",
              style: [styles.list, {
                width: this.state.width,
                maxHeight: this.props.height,
                left: this.state.x,
                top: this.state.y + (position === 'down' ? this.state.height : -this.state.list),
                opacity: this.state.list ? 1 : 0
              }, this.props.style],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 45
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              _react3.default.createElement(
                AnimatedScrollView,
                {
                  automaticallyAdjustContentInsets: false,
                  bounces: false,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                  }
                },
                children.map(function (item, index) {
                  return _react3.default.createElement(
                    _reactNative.TouchableWithoutFeedback,
                    {
                      key: index,
                      onPress: function onPress() {
                        _this3.props.onOptionPressed(item.props.value, item.props.children);
                      },
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 66
                      }
                    },
                    _react3.default.createElement(
                      _reactNative.View,
                      {
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 70
                        }
                      },
                      item
                    )
                  );
                })
              )
            )
          )
        );
      }
    }]);

    return List;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    list: {
      position: 'absolute',
      borderWidth: 1,
      borderColor: '#cccccc',
      backgroundColor: 'white',
      borderRadius: 2
    }
  });

  module.exports = List;
});