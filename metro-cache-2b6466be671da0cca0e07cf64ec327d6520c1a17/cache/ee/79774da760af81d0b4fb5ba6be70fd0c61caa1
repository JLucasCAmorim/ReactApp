__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/lucas/React/MyProject/app/screens/components/loginForm.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = require(_dependencyMap[2], "react-native");

    var _index3 = require(_dependencyMap[3], "../../index");

    var _index4 = _interopRequireDefault(_index3);

    var _firebase = require(_dependencyMap[4], "firebase");

    var _firebase2 = _interopRequireDefault(_firebase);

    var _loader = require(_dependencyMap[5], "./loader");

    var _loader2 = _interopRequireDefault(_loader);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        LoginForm: {
            displayName: "LoginForm"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/lucas/React/MyProject/app/screens/components/loginForm.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var LoginForm = _wrapComponent("LoginForm")(function (_Component) {
        _inherits(LoginForm, _Component);

        function LoginForm(props) {
            _classCallCheck(this, LoginForm);

            var _this = _possibleConstructorReturn(this, (LoginForm.__proto__ || Object.getPrototypeOf(LoginForm)).call(this, props));

            _this.loginUser = function (email, password) {
                var navigate = _this.props.navigate;

                try {
                    _firebase2.default.auth().signInWithEmailAndPassword(email, password).then(function () {
                        navigate();
                    });
                } catch (error) {
                    console.log(error.toString());
                }
            };

            _this.state = {
                email: '',
                password: '',
                loading: false
            };
            return _this;
        }

        _createClass(LoginForm, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 43
                        }
                    },
                    _react3.default.createElement(_loader2.default, {
                        loading: this.state.loading,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                        placeholder: "Username ou Email",
                        returnKeyType: "next",
                        onChangeText: function onChangeText(email) {
                            return _this2.setState({
                                email: email
                            });
                        },
                        value: this.state.email,
                        onSubmitEditing: function onSubmitEditing() {
                            return _this2.passwordInput.focus();
                        },
                        placeholderTextColor: "rgba(255,255,255,0.7)",
                        underlineColorAndroid: "transparent",
                        style: styles.input,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 46
                        }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                        placeholder: "Senha",
                        returnKeyType: "go",
                        secureTextEntry: true,
                        onChangeText: function onChangeText(password) {
                            return _this2.setState({
                                password: password
                            });
                        },
                        value: this.state.password,
                        placeholderTextColor: "rgba(255,255,255,0.7)",
                        underlineColorAndroid: "transparent",
                        style: styles.input,
                        ref: function ref(input) {
                            return _this2.passwordInput = input;
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 56
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: styles.buttonContainer,
                            onPress: function onPress() {
                                return _this2.loginUser(_this2.state.email, _this2.state.password);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.buttonText,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 68
                                }
                            },
                            "LOGIN"
                        )
                    )
                );
            }
        }]);

        return LoginForm;
    }(_react2.Component));

    exports.default = LoginForm;

    var styles = _reactNative.StyleSheet.create({
        container: {
            padding: 20,
            paddingBottom: 40
        },
        input: {
            height: 40,
            backgroundColor: 'rgba(255,255,255,0.2)',
            marginBottom: 20,
            color: '#fff',
            paddingHorizontal: 10
        },
        buttonContainer: {
            backgroundColor: '#2980b9',
            paddingVertical: 10,
            marginBottom: 20
        },
        buttonText: {
            textAlign: 'center',
            color: '#ffffff',
            fontWeight: '700'
        }
    });
});