__d(function (global, require, module, exports, _dependencyMap) {
  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/lucas/React/MyProject/node_modules/react-native-select-list/src/caret.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Caret: {
      displayName: "Caret"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/lucas/React/MyProject/node_modules/react-native-select-list/src/caret.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Caret = _wrapComponent("Caret")(function (_Component) {
    _inherits(Caret, _Component);

    function Caret() {
      _classCallCheck(this, Caret);

      return _possibleConstructorReturn(this, (Caret.__proto__ || Object.getPrototypeOf(Caret)).apply(this, arguments));
    }

    _createClass(Caret, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            element = _props.element,
            size = _props.size,
            color = _props.color;

        if (!element) {
          return null;
        }

        if (typeof element !== "string") {
          return element;
        } else {
          return _react3.default.createElement(_reactNative.View, {
            style: [styles.caret, styles[element], {
              borderLeftWidth: size / 2,
              borderRightWidth: size / 2,
              borderTopWidth: size - 5,
              borderTopColor: color
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 15
            }
          });
        }
      }
    }]);

    return Caret;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    caret: {
      width: 0,
      height: 0,
      backgroundColor: 'transparent',
      borderStyle: 'solid',
      borderLeftColor: 'transparent',
      borderRightColor: 'transparent'
    },
    up: {
      transform: [{
        rotate: '180deg'
      }]
    }
  });

  Caret.propTypes = {
    size: _react3.default.PropTypes.number,
    color: _react3.default.PropTypes.string
  };
  Caret.defaultProps = {
    size: 15,
    color: '#333333'
  };
  module.exports = Caret;
});