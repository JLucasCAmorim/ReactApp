__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createFocusAwareComponent = exports.createFocusableComponent = undefined;

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/lucas/React/MyProject/node_modules/@expo/ex-navigation/src/ExNavigationComponents.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.createNavigatorComponent = createNavigatorComponent;
  exports.withNavigation = withNavigation;

  var _propTypes = require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _uuidJs = require(_dependencyMap[3], "uuid-js");

  var _uuidJs2 = _interopRequireDefault(_uuidJs);

  var _invariant = require(_dependencyMap[4], "invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  var _reselect = require(_dependencyMap[5], "reselect");

  var _hoistNonReactStatics = require(_dependencyMap[6], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _PureComponent3 = require(_dependencyMap[7], "./utils/PureComponent");

  var _PureComponent4 = _interopRequireDefault(_PureComponent3);

  var _shallowEqual = require(_dependencyMap[8], "fbjs/lib/shallowEqual");

  var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

  var _ExNavigationContext = require(_dependencyMap[9], "./ExNavigationContext");

  var _ExNavigationContext2 = _interopRequireDefault(_ExNavigationContext);

  var _ExNavigationConnect = require(_dependencyMap[10], "./ExNavigationConnect");

  var _ExNavigationConnect2 = _interopRequireDefault(_ExNavigationConnect);

  var _ExNavigationPropTypes = require(_dependencyMap[11], "./ExNavigationPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ExNavigatorComponent: {
      displayName: "ExNavigatorComponent",
      isInFunction: true
    },
    WithNavigation: {
      displayName: "WithNavigation",
      isInFunction: true
    },
    FocusableComponent: {
      displayName: "FocusableComponent",
      isInFunction: true
    },
    FocusAwareComponent: {
      displayName: "FocusAwareComponent",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/lucas/React/MyProject/node_modules/@expo/ex-navigation/src/ExNavigationComponents.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
  }

  var getStateForNavigatorId = function getStateForNavigatorId(state, props) {
    var navigationState = state[props.navigation.navigationStateKey];
    return navigationState.navigators && props.navigatorUID && navigationState.navigators[props.navigatorUID];
  };

  var makeNavigatorStateSelector = function makeNavigatorStateSelector() {
    return (0, _reselect.createSelector)([getStateForNavigatorId], function (navigationState) {
      return navigationState;
    });
  };

  function createNavigatorComponent(WrappedComponent) {
    var _class, _temp;

    var makeMapStateToProps = function makeMapStateToProps() {
      var navigatorStateSelector = makeNavigatorStateSelector();
      return function (iState, iProps) {
        return {
          navigationState: navigatorStateSelector(iState, iProps)
        };
      };
    };

    var ConnectedWrappedComponent = (0, _ExNavigationConnect2.default)(makeMapStateToProps, null, null, {
      withRef: true
    })(createFocusableComponent(WrappedComponent));

    var ExNavigatorComponent = _wrapComponent("ExNavigatorComponent")((_temp = _class = function (_React$Component) {
      _inherits(ExNavigatorComponent, _React$Component);

      function ExNavigatorComponent(props, context) {
        _classCallCheck(this, ExNavigatorComponent);

        var _this = _possibleConstructorReturn(this, (ExNavigatorComponent.__proto__ || Object.getPrototypeOf(ExNavigatorComponent)).call(this, props, context));

        _this._wrappedInstanceRef = function (c) {
          if (c == null) {
            _this._wrappedInstance = null;
          } else {
            _this._wrappedInstance = c.refs.wrappedInstance;
          }
        };

        _this._wrappedInstance = null;

        var navigatorUID = _uuidJs2.default.create(4).toString();

        _this.state = {
          navigatorUID: navigatorUID
        };
        return _this;
      }

      _createClass(ExNavigatorComponent, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
          return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
        }
      }, {
        key: "render",
        value: function render() {
          var navigation = this.getNavigationContext();
          return _react3.default.createElement(ConnectedWrappedComponent, _extends({
            ref: this._wrappedInstanceRef,
            navigatorUID: this.state.navigatorUID,
            navigation: navigation,
            onRegisterNavigatorContext: navigation.registerNavigatorContext,
            onUnregisterNavigatorContext: navigation.unregisterNavigatorContext
          }, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 114
            }
          }));
        }
      }, {
        key: "getChildContext",
        value: function getChildContext() {
          return {
            navigation: this.getNavigationContext()
          };
        }
      }, {
        key: "getWrappedInstance",
        value: function getWrappedInstance() {
          return this._wrappedInstance;
        }
      }, {
        key: "getNavigationContext",
        value: function getNavigationContext() {
          return this.props.navigation || this.context.navigation;
        }
      }]);

      return ExNavigatorComponent;
    }(_react3.default.Component), _class.contextTypes = {
      navigation: _propTypes2.default.instanceOf(_ExNavigationContext2.default)
    }, _class.childContextTypes = {
      navigation: _propTypes2.default.instanceOf(_ExNavigationContext2.default)
    }, _temp));

    var C = (0, _hoistNonReactStatics2.default)(ExNavigatorComponent, ConnectedWrappedComponent);
    C.displayName = "ExNavigatorComponent(" + getDisplayName(C) + ")";
    return C;
  }

  var NavigatorPropType = _propTypes2.default.object;

  function withNavigation(WrappedComponent) {
    var _class2, _temp2;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        withRef = _ref.withRef;

    var WithNavigation = _wrapComponent("WithNavigation")((_temp2 = _class2 = function (_PureComponent) {
      _inherits(WithNavigation, _PureComponent);

      function WithNavigation() {
        _classCallCheck(this, WithNavigation);

        return _possibleConstructorReturn(this, (WithNavigation.__proto__ || Object.getPrototypeOf(WithNavigation)).apply(this, arguments));
      }

      _createClass(WithNavigation, [{
        key: "render",
        value: function render() {
          return _react3.default.createElement(WrappedComponent, _extends({
            ref: withRef ? this.setWrappedInstance : undefined,
            navigation: this.getNavigationContext(),
            navigator: this.getCurrentNavigator()
          }, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 180
            }
          }));
        }
      }, {
        key: "getChildContext",
        value: function getChildContext() {
          return {
            navigation: this.getNavigationContext(),
            navigator: this.getCurrentNavigator()
          };
        }
      }, {
        key: "getWrappedInstance",
        value: function getWrappedInstance() {
          if (__DEV__) {
            (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } in the options argument of withNavigation call.');
          }

          return this._wrappedInstance;
        }
      }, {
        key: "setWrappedInstance",
        value: function setWrappedInstance(ref) {
          this._wrappedInstance = ref;
        }
      }, {
        key: "getNavigationContext",
        value: function getNavigationContext() {
          return this.props.navigation || this.context.navigation;
        }
      }, {
        key: "getCurrentNavigator",
        value: function getCurrentNavigator() {
          return this.props.navigator || this.context.navigator;
        }
      }]);

      return WithNavigation;
    }(_PureComponent4.default), _class2.contextTypes = {
      navigation: _ExNavigationPropTypes.NavigationPropType,
      navigator: NavigatorPropType
    }, _class2.childContextTypes = {
      navigation: _ExNavigationPropTypes.NavigationPropType,
      navigator: NavigatorPropType
    }, _temp2));

    var C = (0, _hoistNonReactStatics2.default)(WithNavigation, WrappedComponent);
    C.displayName = "WithNavigation(" + getDisplayName(WrappedComponent) + ")";
    return C;
  }

  var createFocusableComponent = exports.createFocusableComponent = function createFocusableComponent(WrappedComponent) {
    var _class3, _temp3;

    var _componentIsNavigator = WrappedComponent.route && WrappedComponent.route.__isNavigator;

    var FocusableComponent = _wrapComponent("FocusableComponent")((_temp3 = _class3 = function (_PureComponent2) {
      _inherits(FocusableComponent, _PureComponent2);

      _createClass(FocusableComponent, [{
        key: "getChildContext",
        value: function getChildContext() {
          return {
            isFocused: this.state.isFocused
          };
        }
      }]);

      function FocusableComponent(props, context) {
        _classCallCheck(this, FocusableComponent);

        var _this3 = _possibleConstructorReturn(this, (FocusableComponent.__proto__ || Object.getPrototypeOf(FocusableComponent)).call(this, props, context));

        _this3._handleStateUpdate = function () {
          try {
            var state = _this3.props.navigation.store.getState();

            var navState = _extends({}, state.navigation);

            if (navState === _this3._prevNavState || !navState || !navState.currentNavigatorUID) {
              return;
            }

            var focusedRoute = _this3.props.navigation.getFocusedRoute();

            var focusedNavigatorUID = _this3.props.navigation.getCurrentNavigatorUID();

            var isFocused = false;

            if (_componentIsNavigator) {
              isFocused = focusedNavigatorUID === _this3.props.navigatorUID;
            } else if (_this3.props.route) {
              isFocused = _this3.props.route === focusedRoute;
            }

            if (isFocused !== _this3.state.isFocused) {
              _this3.setState({
                isFocused: isFocused
              });
            }

            _this3._prevNavState = navState;
          } catch (e) {
            throw e;
          }
        };

        _this3._prevNavState = null;
        _this3.state = {
          isFocused: false
        };
        return _this3;
      }

      _createClass(FocusableComponent, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._handleStateUpdate();
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.subscribeToStore();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._unsubcribeFromStore && this._unsubcribeFromStore();
        }
      }, {
        key: "subscribeToStore",
        value: function subscribeToStore() {
          var _this4 = this;

          this._unsubcribeFromStore = this.props.navigation.store.subscribe(function () {
            _this4._handleStateUpdate();
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this5 = this;

          return _react3.default.createElement(WrappedComponent, _extends({
            ref: function ref(c) {
              _this5._wrappedInstance = c;
            }
          }, this.props, {
            isFocused: this.state.isFocused,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 273
            }
          }));
        }
      }, {
        key: "getWrappedInstance",
        value: function getWrappedInstance() {
          return this._wrappedInstance;
        }
      }]);

      return FocusableComponent;
    }(_PureComponent4.default), _class3.childContextTypes = {
      isFocused: _propTypes2.default.bool
    }, _temp3));

    var C = (0, _hoistNonReactStatics2.default)(withNavigation(FocusableComponent), WrappedComponent);
    C.displayName = "FocusableComponent(" + getDisplayName(WrappedComponent) + ")";
    return C;
  };

  var createFocusAwareComponent = exports.createFocusAwareComponent = function createFocusAwareComponent(WrappedComponent) {
    var _class4, _temp5;

    var FocusAwareComponent = _wrapComponent("FocusAwareComponent")((_temp5 = _class4 = function (_React$Component2) {
      _inherits(FocusAwareComponent, _React$Component2);

      function FocusAwareComponent() {
        var _ref2;

        var _temp4, _this6, _ret;

        _classCallCheck(this, FocusAwareComponent);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp4 = (_this6 = _possibleConstructorReturn(this, (_ref2 = FocusAwareComponent.__proto__ || Object.getPrototypeOf(FocusAwareComponent)).call.apply(_ref2, [this].concat(args))), _this6), _this6._getIsFocused = function () {
          return _this6.props.isFocused || _this6.context.isFocused;
        }, _temp4), _possibleConstructorReturn(_this6, _ret);
      }

      _createClass(FocusAwareComponent, [{
        key: "getChildContext",
        value: function getChildContext() {
          return {
            isFocused: this._getIsFocused()
          };
        }
      }, {
        key: "render",
        value: function render() {
          var _this7 = this;

          return _react3.default.createElement(WrappedComponent, _extends({
            ref: function ref(c) {
              _this7._wrappedInstance = c;
            }
          }, this.props, {
            isFocused: this._getIsFocused(),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 350
            }
          }));
        }
      }, {
        key: "getWrappedInstance",
        value: function getWrappedInstance() {
          return this._wrappedInstance;
        }
      }]);

      return FocusAwareComponent;
    }(_react3.default.Component), _class4.contextTypes = {
      isFocused: _propTypes2.default.bool
    }, _class4.childContextTypes = {
      isFocused: _propTypes2.default.bool
    }, _temp5));

    var C = (0, _hoistNonReactStatics2.default)(FocusAwareComponent, WrappedComponent);
    C.displayName = "FocusAwareComponent(" + getDisplayName(C) + ")";
    return C;
  };
});