__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class, _temp2;

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _invariant = require(_dependencyMap[4], "invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SharedElement: {
      displayName: "SharedElement"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/lucas/React/MyProject/node_modules/@expo/ex-navigation/src/shared-element/ExNavigationSharedElement.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var SharedElement = _wrapComponent("SharedElement")((_temp2 = _class = function (_Component) {
    _inherits(SharedElement, _Component);

    function SharedElement() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SharedElement);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SharedElement.__proto__ || Object.getPrototypeOf(SharedElement)).call.apply(_ref, [this].concat(args))), _this), _this._el = null, _this.getAnimationStyle = function (progress, fromMetrics, toMetrics) {
        var initialScaleX = fromMetrics.width / toMetrics.width;
        var initialScaleY = fromMetrics.height / toMetrics.height;
        return {
          position: 'absolute',
          top: 0,
          left: 0,
          right: null,
          bottom: null,
          width: toMetrics.width,
          height: toMetrics.height,
          marginLeft: 0,
          marginRight: 0,
          marginTop: 0,
          marginBottom: 0,
          transform: [{
            translateX: progress.interpolate({
              inputRange: [0, 1],
              outputRange: [(fromMetrics.width - toMetrics.width) / 2 + fromMetrics.x, toMetrics.x]
            })
          }, {
            translateY: progress.interpolate({
              inputRange: [0, 1],
              outputRange: [(fromMetrics.height - toMetrics.height) / 2 + fromMetrics.y, toMetrics.y]
            })
          }, {
            scaleX: progress.interpolate({
              inputRange: [0, 1],
              outputRange: [initialScaleX, 1]
            })
          }, {
            scaleY: progress.interpolate({
              inputRange: [0, 1],
              outputRange: [initialScaleY, 1]
            })
          }]
        };
      }, _this.measure = function () {
        return new Promise(function (resolve) {
          if (!_this.context.elementGroupUid) {
            resolve();
            return;
          }

          _reactNative.UIManager.measure((0, _reactNative.findNodeHandle)(_this._el), function (origX, origY, width, height, x, y) {
            var store = _this.context.sharedElementStore;
            store.dispatch({
              type: 'UPDATE_METRICS_FOR_ELEMENT',
              groupUid: _this.context.elementGroupUid,
              id: _this.props.id,
              metrics: {
                x: x,
                y: y,
                width: width,
                height: height
              }
            });
            resolve();
          });
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SharedElement, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var childFn = this.props.children;
        var animationStyle = {};

        if (this.props.transitionProps && this.props.transitionProps.progress && this.props.transitionProps.fromMetrics && this.props.transitionProps.toMetrics) {
          var _props$transitionProp = this.props.transitionProps,
              progress = _props$transitionProp.progress,
              fromMetrics = _props$transitionProp.fromMetrics,
              toMetrics = _props$transitionProp.toMetrics;
          animationStyle = this.getAnimationStyle(progress, fromMetrics, toMetrics);
        }

        (0, _invariant2.default)(childFn, 'Must pass a function as a child to `SharedElement`.');
        var childEl = childFn(animationStyle);
        return (0, _react2.cloneElement)(childEl, {
          ref: function ref(c) {
            _this2._el = c;
          },
          collapsable: false,
          onLayout: this.measure
        });
      }
    }]);

    return SharedElement;
  }(_react2.Component), _class.contextTypes = {
    sharedElementStore: _propTypes2.default.any,
    elementGroupUid: _propTypes2.default.any
  }, _temp2));

  exports.default = SharedElement;
});